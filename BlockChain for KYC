Using the Smart Contract system in Ethereum framework, we will build an intelligent Digital Signatures based system that will trigger actions for various events- such creating a savings bank account, loan processing or intra bank money transfer, mutual fund products
Verification of KYC documents takes extreme levels of efforts and time. 
For whom the KYC is required:
•	A person or entity that maintains an account and/or has a business relationship with the bank
•	One on whose behalf the account is maintained (i.e. the beneficial owner)
•	Beneficiaries of transactions conducted by professional intermediaries such as stockbrokers, Chartered Accountants, or solicitors, as permitted under the law
•	Any person or entity connected with a financial transaction which can pose significant reputational or other risks to the bank, for example, a wire transfer or issue of a high-value demand draft as a single transaction.

When is KYC required:
KYC is required while,
•	Opening a bank account
•	Availing Locker facility
•	Applying for credit card
•	Applying for loans
•	Existing documents are not enough
•	Changing signatory, nominee

Currently, KYC is a legal requirement in many sectors, apart from banks. Whether it is mutual Funds, insurance, broking, or commodity trading KYC has been made compulsory in order to verify the identity of the clients.

How Smart Contracts will help with KYC:
The Customer transactions between accounts will be tracked and stored on a blockchain. Let us name it as the “BoB” Blockchain. All transactions on the BoB blockchain will only be known to the peers of this blockchain and no one outside.

Let us consider the case of customer onboarding for retail savings bank account. The first steps, as per the KYC policy of RBI guidelines, would be to collect the documents from the customer for the various requirements presented above. 	

During the onboarding of the customer onto the blockchain, apart from their wallet address (in this bank account number or the loan disbursal account number) and a private key to access their account and commit transactions using the wallet.

Once the customers have these wallet addresses, they can commit transactions to other wallets on the BoB blockchain (other customers, merchants and many others who have valid wallet address).

While committing transactions, an inherent standard on the blockchain is to use the concept of Digital Signatures. No transaction will be possible without the use of a public key (wallet address) and the private key (one with the customer). 

As details of the transaction, we shall store the along with the timestamp and the amount involved, the hash of the kyc details of the customer/institution committing the transaction.

Wider Architecture of the system:
•	Blockchain on Ethereum, with smart contracts
•	Front –end user interface
•	DB that has mapping between customer and their public address key
•	Admin interface for the bank


How to avoid KYC duplicity on the blockchain:
Unique KYC for a customer should be one and the same. Multiple KYC keys cannot exist. 
Using the consensus mechanism on the blockchain we will create the method to validate a transaction between two customers. When a majority of consensus is achieved on the blockchain


Reference:
https://github.com/SmartIdentity/smartId-contracts

Problems to address:
-	Same wallet address can be used by any adversary who steals it from the victim
-	Mistyping the addresses of wallets

